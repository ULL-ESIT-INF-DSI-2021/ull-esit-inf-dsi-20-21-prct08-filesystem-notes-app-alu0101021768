{"/home/usuario/workspace/prct08-filesystem-notes-app/src/notes.ts":{"path":"/home/usuario/workspace/prct08-filesystem-notes-app/src/notes.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":23}},"2":{"start":{"line":4,"column":14},"end":{"line":4,"column":30}},"3":{"start":{"line":5,"column":13},"end":{"line":5,"column":26}},"4":{"start":{"line":6,"column":13},"end":{"line":6,"column":26}},"5":{"start":{"line":7,"column":13},"end":{"line":7,"column":26}},"6":{"start":{"line":8,"column":13},"end":{"line":8,"column":26}},"7":{"start":{"line":9,"column":13},"end":{"line":9,"column":26}},"8":{"start":{"line":10,"column":13},"end":{"line":10,"column":26}},"9":{"start":{"line":11,"column":18},"end":{"line":11,"column":38}},"10":{"start":{"line":16,"column":21},"end":{"line":16,"column":38}},"11":{"start":{"line":35,"column":8},"end":{"line":37,"column":9}},"12":{"start":{"line":36,"column":12},"end":{"line":36,"column":46}},"13":{"start":{"line":38,"column":8},"end":{"line":38,"column":35}},"14":{"start":{"line":46,"column":20},"end":{"line":46,"column":39}},"15":{"start":{"line":47,"column":19},"end":{"line":47,"column":31}},"16":{"start":{"line":48,"column":8},"end":{"line":68,"column":11}},"17":{"start":{"line":49,"column":29},"end":{"line":49,"column":58}},"18":{"start":{"line":50,"column":31},"end":{"line":50,"column":62}},"19":{"start":{"line":51,"column":12},"end":{"line":67,"column":13}},"20":{"start":{"line":53,"column":20},"end":{"line":53,"column":64}},"21":{"start":{"line":54,"column":20},"end":{"line":54,"column":26}},"22":{"start":{"line":56,"column":20},"end":{"line":56,"column":63}},"23":{"start":{"line":57,"column":20},"end":{"line":57,"column":26}},"24":{"start":{"line":59,"column":20},"end":{"line":59,"column":66}},"25":{"start":{"line":60,"column":20},"end":{"line":60,"column":26}},"26":{"start":{"line":62,"column":20},"end":{"line":62,"column":65}},"27":{"start":{"line":63,"column":20},"end":{"line":63,"column":26}},"28":{"start":{"line":65,"column":20},"end":{"line":65,"column":52}},"29":{"start":{"line":66,"column":20},"end":{"line":66,"column":26}},"30":{"start":{"line":69,"column":8},"end":{"line":69,"column":20}},"31":{"start":{"line":82,"column":21},"end":{"line":82,"column":86}},"32":{"start":{"line":83,"column":20},"end":{"line":83,"column":39}},"33":{"start":{"line":84,"column":26},"end":{"line":84,"column":42}},"34":{"start":{"line":85,"column":8},"end":{"line":87,"column":9}},"35":{"start":{"line":86,"column":12},"end":{"line":86,"column":50}},"36":{"start":{"line":88,"column":8},"end":{"line":88,"column":44}},"37":{"start":{"line":89,"column":8},"end":{"line":89,"column":33}},"38":{"start":{"line":103,"column":20},"end":{"line":103,"column":39}},"39":{"start":{"line":104,"column":26},"end":{"line":104,"column":42}},"40":{"start":{"line":105,"column":25},"end":{"line":105,"column":53}},"41":{"start":{"line":106,"column":27},"end":{"line":106,"column":58}},"42":{"start":{"line":107,"column":8},"end":{"line":109,"column":9}},"43":{"start":{"line":108,"column":12},"end":{"line":108,"column":43}},"44":{"start":{"line":110,"column":22},"end":{"line":110,"column":26}},"45":{"start":{"line":111,"column":23},"end":{"line":111,"column":28}},"46":{"start":{"line":112,"column":8},"end":{"line":114,"column":9}},"47":{"start":{"line":113,"column":12},"end":{"line":113,"column":38}},"48":{"start":{"line":115,"column":8},"end":{"line":117,"column":9}},"49":{"start":{"line":116,"column":12},"end":{"line":116,"column":40}},"50":{"start":{"line":118,"column":21},"end":{"line":118,"column":92}},"51":{"start":{"line":119,"column":8},"end":{"line":119,"column":44}},"52":{"start":{"line":120,"column":8},"end":{"line":120,"column":44}},"53":{"start":{"line":130,"column":20},"end":{"line":130,"column":39}},"54":{"start":{"line":131,"column":26},"end":{"line":131,"column":42}},"55":{"start":{"line":132,"column":8},"end":{"line":134,"column":9}},"56":{"start":{"line":133,"column":12},"end":{"line":133,"column":43}},"57":{"start":{"line":135,"column":8},"end":{"line":135,"column":31}},"58":{"start":{"line":136,"column":8},"end":{"line":136,"column":31}},"59":{"start":{"line":145,"column":20},"end":{"line":145,"column":39}},"60":{"start":{"line":146,"column":26},"end":{"line":146,"column":42}},"61":{"start":{"line":147,"column":8},"end":{"line":149,"column":9}},"62":{"start":{"line":148,"column":12},"end":{"line":148,"column":43}},"63":{"start":{"line":150,"column":25},"end":{"line":150,"column":53}},"64":{"start":{"line":151,"column":27},"end":{"line":151,"column":58}},"65":{"start":{"line":152,"column":21},"end":{"line":152,"column":44}},"66":{"start":{"line":153,"column":8},"end":{"line":169,"column":9}},"67":{"start":{"line":155,"column":16},"end":{"line":155,"column":54}},"68":{"start":{"line":156,"column":16},"end":{"line":156,"column":22}},"69":{"start":{"line":158,"column":16},"end":{"line":158,"column":53}},"70":{"start":{"line":159,"column":16},"end":{"line":159,"column":22}},"71":{"start":{"line":161,"column":16},"end":{"line":161,"column":56}},"72":{"start":{"line":162,"column":16},"end":{"line":162,"column":22}},"73":{"start":{"line":164,"column":16},"end":{"line":164,"column":55}},"74":{"start":{"line":165,"column":16},"end":{"line":165,"column":22}},"75":{"start":{"line":167,"column":16},"end":{"line":167,"column":42}},"76":{"start":{"line":168,"column":16},"end":{"line":168,"column":22}},"77":{"start":{"line":170,"column":8},"end":{"line":170,"column":22}},"78":{"start":{"line":179,"column":22},"end":{"line":179,"column":38}},"79":{"start":{"line":180,"column":8},"end":{"line":182,"column":9}},"80":{"start":{"line":181,"column":12},"end":{"line":181,"column":34}},"81":{"start":{"line":183,"column":8},"end":{"line":183,"column":21}},"82":{"start":{"line":186,"column":0},"end":{"line":186,"column":22}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":26,"column":4},"end":{"line":26,"column":5}},"loc":{"start":{"line":26,"column":18},"end":{"line":28,"column":5}},"line":26},"1":{"name":"(anonymous_1)","decl":{"start":{"line":34,"column":4},"end":{"line":34,"column":5}},"loc":{"start":{"line":34,"column":30},"end":{"line":39,"column":5}},"line":34},"2":{"name":"(anonymous_2)","decl":{"start":{"line":45,"column":4},"end":{"line":45,"column":5}},"loc":{"start":{"line":45,"column":20},"end":{"line":70,"column":5}},"line":45},"3":{"name":"(anonymous_3)","decl":{"start":{"line":48,"column":38},"end":{"line":48,"column":39}},"loc":{"start":{"line":48,"column":48},"end":{"line":68,"column":9}},"line":48},"4":{"name":"(anonymous_4)","decl":{"start":{"line":81,"column":4},"end":{"line":81,"column":5}},"loc":{"start":{"line":81,"column":38},"end":{"line":90,"column":5}},"line":81},"5":{"name":"(anonymous_5)","decl":{"start":{"line":102,"column":4},"end":{"line":102,"column":5}},"loc":{"start":{"line":102,"column":41},"end":{"line":121,"column":5}},"line":102},"6":{"name":"(anonymous_6)","decl":{"start":{"line":129,"column":4},"end":{"line":129,"column":5}},"loc":{"start":{"line":129,"column":28},"end":{"line":137,"column":5}},"line":129},"7":{"name":"(anonymous_7)","decl":{"start":{"line":144,"column":4},"end":{"line":144,"column":5}},"loc":{"start":{"line":144,"column":26},"end":{"line":171,"column":5}},"line":144},"8":{"name":"(anonymous_8)","decl":{"start":{"line":178,"column":4},"end":{"line":178,"column":5}},"loc":{"start":{"line":178,"column":19},"end":{"line":184,"column":5}},"line":178}},"branchMap":{"0":{"loc":{"start":{"line":35,"column":8},"end":{"line":37,"column":9}},"type":"if","locations":[{"start":{"line":35,"column":8},"end":{"line":37,"column":9}},{"start":{"line":35,"column":8},"end":{"line":37,"column":9}}],"line":35},"1":{"loc":{"start":{"line":51,"column":12},"end":{"line":67,"column":13}},"type":"switch","locations":[{"start":{"line":52,"column":16},"end":{"line":54,"column":26}},{"start":{"line":55,"column":16},"end":{"line":57,"column":26}},{"start":{"line":58,"column":16},"end":{"line":60,"column":26}},{"start":{"line":61,"column":16},"end":{"line":63,"column":26}},{"start":{"line":64,"column":16},"end":{"line":66,"column":26}}],"line":51},"2":{"loc":{"start":{"line":85,"column":8},"end":{"line":87,"column":9}},"type":"if","locations":[{"start":{"line":85,"column":8},"end":{"line":87,"column":9}},{"start":{"line":85,"column":8},"end":{"line":87,"column":9}}],"line":85},"3":{"loc":{"start":{"line":107,"column":8},"end":{"line":109,"column":9}},"type":"if","locations":[{"start":{"line":107,"column":8},"end":{"line":109,"column":9}},{"start":{"line":107,"column":8},"end":{"line":109,"column":9}}],"line":107},"4":{"loc":{"start":{"line":112,"column":8},"end":{"line":114,"column":9}},"type":"if","locations":[{"start":{"line":112,"column":8},"end":{"line":114,"column":9}},{"start":{"line":112,"column":8},"end":{"line":114,"column":9}}],"line":112},"5":{"loc":{"start":{"line":115,"column":8},"end":{"line":117,"column":9}},"type":"if","locations":[{"start":{"line":115,"column":8},"end":{"line":117,"column":9}},{"start":{"line":115,"column":8},"end":{"line":117,"column":9}}],"line":115},"6":{"loc":{"start":{"line":132,"column":8},"end":{"line":134,"column":9}},"type":"if","locations":[{"start":{"line":132,"column":8},"end":{"line":134,"column":9}},{"start":{"line":132,"column":8},"end":{"line":134,"column":9}}],"line":132},"7":{"loc":{"start":{"line":147,"column":8},"end":{"line":149,"column":9}},"type":"if","locations":[{"start":{"line":147,"column":8},"end":{"line":149,"column":9}},{"start":{"line":147,"column":8},"end":{"line":149,"column":9}}],"line":147},"8":{"loc":{"start":{"line":153,"column":8},"end":{"line":169,"column":9}},"type":"switch","locations":[{"start":{"line":154,"column":12},"end":{"line":156,"column":22}},{"start":{"line":157,"column":12},"end":{"line":159,"column":22}},{"start":{"line":160,"column":12},"end":{"line":162,"column":22}},{"start":{"line":163,"column":12},"end":{"line":165,"column":22}},{"start":{"line":166,"column":12},"end":{"line":168,"column":22}}],"line":153},"9":{"loc":{"start":{"line":180,"column":8},"end":{"line":182,"column":9}},"type":"if","locations":[{"start":{"line":180,"column":8},"end":{"line":182,"column":9}},{"start":{"line":180,"column":8},"end":{"line":182,"column":9}}],"line":180}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":2,"12":1,"13":2,"14":2,"15":2,"16":2,"17":2,"18":2,"19":2,"20":1,"21":1,"22":1,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":2,"31":6,"32":6,"33":6,"34":6,"35":0,"36":6,"37":6,"38":2,"39":2,"40":2,"41":2,"42":2,"43":0,"44":2,"45":2,"46":2,"47":1,"48":2,"49":2,"50":2,"51":2,"52":2,"53":6,"54":6,"55":6,"56":0,"57":6,"58":6,"59":2,"60":2,"61":2,"62":1,"63":1,"64":1,"65":1,"66":1,"67":0,"68":0,"69":1,"70":1,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":1,"78":18,"79":18,"80":0,"81":18,"82":1},"f":{"0":1,"1":2,"2":2,"3":2,"4":6,"5":2,"6":6,"7":2,"8":18},"b":{"0":[1,1],"1":[1,1,0,0,0],"2":[0,6],"3":[0,2],"4":[1,1],"5":[2,0],"6":[0,6],"7":[1,1],"8":[0,1,0,0,0],"9":[0,18]},"inputSourceMap":{"version":3,"file":"/home/usuario/workspace/prct08-filesystem-notes-app/src/notes.ts","sources":["/home/usuario/workspace/prct08-filesystem-notes-app/src/notes.ts"],"names":[],"mappings":"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","sourcesContent":["import * as chalk from 'chalk';\nimport {existsSync} from 'fs';\nimport {mkdirSync} from 'fs';\nimport {writeFileSync} from 'fs';\nimport {readdirSync} from 'fs';\nimport {readFileSync} from 'fs';\nimport {rmSync} from 'fs';\nimport {ColorStruct} from './helpers';\n\n/**\n * @description Const used to store a repeated message\n * and not have to write it everytime it's needed\n */\nconst noteNotFound = \"Note not found!\";\n/**\n * @description Class Notes that represents multiple operations working with\n * the node filesystem utilities to create, modify, remove, read and list notes\n * from multiple users\n */\nexport class Notes {\n  private static NotesInstance: Notes;\n  /**\n   * @description Class Notes constructor, in this case, it does nothing\n   */\n  constructor() {\n    // This is intentional\n  }\n  /**\n   * @description Static getter method that returns the instance of the notes\n   * class and creates it if doesn't exist\n   * @returns Returns a Notes instance\n   */\n  public static getNotesInstance(): Notes {\n    if (!Notes.NotesInstance) {\n      Notes.NotesInstance = new Notes();\n    }\n    return Notes.NotesInstance;\n  }\n  /**\n   * @description Method that lists all the notes from the user's directory.\n   * @param user Consists of a string representing user's name\n   * @returns Returns a string with the result of listing all the user notes\n   */\n  public listNotes(user: string) {\n    const dir = this.getRoute(user);\n    let list = \"Your notes\";\n    readdirSync(dir).forEach((file) => {\n      const fileData = readFileSync(dir + file);\n      const dataToJson = JSON.parse(fileData.toString());\n      switch (dataToJson.color) {\n        case ColorStruct.blue:\n          list += chalk.blue(\"\\n\" + dataToJson.title);\n          break;\n        case ColorStruct.red:\n          list += chalk.red(\"\\n\" + dataToJson.title);\n          break;\n        case ColorStruct.yellow:\n          list += chalk.yellow(\"\\n\" + dataToJson.title);\n          break;\n        case ColorStruct.green:\n          list += chalk.green(\"\\n\" + dataToJson.title);\n          break;\n        default:\n          list += \"\\n\" + dataToJson.title;\n          break;\n      }\n    });\n    return list;\n  }\n  /**\n   * @description Method that adds a new note in a file to an users directory,\n   * creating the directory if it doesn't exist.\n   * @param user Consists of a string representing user's name\n   * @param title Consists of a string representing the user's note title\n   * @param body Consists of a string representing the user's note body\n   * @param color Consists of a string representing the user's note color\n   * @returns Returns a string with the result of adding the note,\n   * or an error\n   */\n  public addNote(user: string, title: string, body: string, color: string) {\n    const data =\n      `{ \"title\": \"${title}\", \"body\": \"${body}\", \"color\": \"${color}\" }`;\n    const dir = this.getRoute(user);\n    const fileRoute = dir + `${title}`;\n    if (existsSync(fileRoute)) {\n      return chalk.red(\"Note title taken!\");\n    }\n    writeFileSync(fileRoute, data);\n    return \"New note added!\";\n  }\n  /**\n   * @description Method that modifies an existing note by specifying the user\n   * and the title of the note, rest of parameters are optional but if some are\n   * provided, the existing data will be overwritten by the new data\n   * @param user Consists of a string representing user's name\n   * @param title Consists of a string representing the user's note title\n   * @param body Consists of a string representing the user's note body\n   * @param color Consists of a string representing the user's note color\n   * @returns Returns a string with the result of modifying the note,\n   * or an error\n   */\n  public modifyNote(user: string, title: string, body?: string,\n      color?: string) {\n    const dir = this.getRoute(user);\n    const fileRoute = dir + `${title}`;\n    const fileData = readFileSync(fileRoute);\n    const dataToJson = JSON.parse(fileData.toString());\n    if (!existsSync(fileRoute)) {\n      return chalk.red(noteNotFound);\n    }\n    let newBody = body;\n    let newColor = color;\n    if (body === undefined) {\n      newBody = dataToJson.body;\n    }\n    if (color === undefined) {\n      newColor = dataToJson.color;\n    }\n    const data =\n      `{ \"title\": \"${title}\", \"body\": \"${newBody}\", \"color\": \"${newColor}\" }`;\n    writeFileSync(fileRoute, data);\n    return \"Note modified succesfully!\";\n  }\n  /**\n   * @description Method that removes an existing note by specifying the user\n   * and the title of the note\n   * @param user Consists of a string representing user's name\n   * @param title Consists of a string representing the user's note title\n   * @returns Returns a string with the result of removing the note, or an error\n   */\n  public removeNote(user: string, title: string) {\n    const dir = this.getRoute(user);\n    const fileRoute = dir + `${title}`;\n    if (!existsSync(fileRoute)) {\n      return chalk.red(noteNotFound);\n    }\n    rmSync(fileRoute);\n    return \"Note removed!\";\n  }\n  /**\n   * @description Method for reading a specific user note\n   * @param user Consists of a string representing user's name\n   * @param title Consists of a string representing the user's note title\n   * @returns Returns a string with the result of reading the note, or an error\n   */\n  public readNote(user: string, title: string) {\n    const dir = this.getRoute(user);\n    const fileRoute = dir + `${title}`;\n    if (!existsSync(fileRoute)) {\n      return chalk.red(noteNotFound);\n    }\n    const fileData = readFileSync(fileRoute);\n    const dataToJson = JSON.parse(fileData.toString());\n    let result = dataToJson.title + \"\\n\";\n    switch (dataToJson.color) {\n      case ColorStruct.blue:\n        result += chalk.blue(dataToJson.body);\n        break;\n      case ColorStruct.red:\n        result += chalk.red(dataToJson.body);\n        break;\n      case ColorStruct.yellow:\n        result += chalk.yellow(dataToJson.body);\n        break;\n      case ColorStruct.green:\n        result += chalk.green(dataToJson.body);\n        break;\n      default:\n        result += dataToJson.body;\n        break;\n    }\n    return result;\n  }\n  /**\n   * @description Getter method for checking if a route exists, creating it\n   * if doesn't exist\n   * @param user Consists of a string\n   * @returns Returns a string\n   */\n  private getRoute(user: string) {\n    const route = `./src/${user}/`;\n    if (!existsSync(route)) {\n      mkdirSync(route);\n    }\n    return route;\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"47088f0672a558f6931c7daf3952252d0600c630","contentHash":"92c774f73407d15c5a25a84a2e3c411c6c923deb20deb4df33b73e09f56c7aaf"},"/home/usuario/workspace/prct08-filesystem-notes-app/src/helpers.ts":{"path":"/home/usuario/workspace/prct08-filesystem-notes-app/src/helpers.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":29}},"2":{"start":{"line":7,"column":0},"end":{"line":12,"column":2}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1,"2":1},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"/home/usuario/workspace/prct08-filesystem-notes-app/src/helpers.ts","sources":["/home/usuario/workspace/prct08-filesystem-notes-app/src/helpers.ts"],"names":[],"mappings":";;;AAAA;;GAEG;AACU,QAAA,WAAW,GAAG;IACzB,GAAG,EAAE,KAAK;IACV,MAAM,EAAE,QAAQ;IAChB,KAAK,EAAE,OAAO;IACd,IAAI,EAAE,MAAM;CACb,CAAC","sourcesContent":["/**\n * @description Object used to manage the colors that i will use with chalk\n */\nexport const ColorStruct = {\n  red: \"Red\",\n  yellow: \"Yellow\",\n  green: \"Green\",\n  blue: \"Blue\",\n};\n\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"58e8fcfb690242d85030b7824e0827376023fd90","contentHash":"0a1dcefc971adf6a4dd69f01d3bac7b28a1190f857f4bc8995f449c2d008cd08"}}